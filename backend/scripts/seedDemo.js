import 'dotenv/config'
import mongoose from 'mongoose'
import bcrypt from 'bcryptjs'
import User from '../src/models/User.js'
import Product from '../src/models/Product.js'
import Order from '../src/models/Order.js'

await mongoose.connect(process.env.MONGO_URI)
console.log('[seed] connected')

const buyers = [
  { name:'‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠', email:'a@example.com', phone:'0810001111', password:'123456', address:'‡∏Å‡∏ó‡∏°.' },
  { name:'‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏µ', email:'b@example.com', phone:'0810002222', password:'123456', address:'‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ' },
]
const products = [
  { name:"‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤‡∏Æ‡πà‡∏≠‡∏á‡∏Å‡∏á", description:"‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô ‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏ß‡∏≤‡∏ô", category:"veg", unit:"‡∏Å‡∏Å.", price:55, stock:32, rating:4.6, images:["ü•¨"] },
  { name:"‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏´‡∏≠‡∏°", description:"‡∏™‡∏î‡∏Å‡∏£‡∏≠‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏ô", category:"veg", unit:"‡∏Å‡∏Å.", price:49, stock:24, rating:4.4, images:["ü•ó"] },
  { name:"‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤", description:"‡πÅ‡∏ï‡∏á‡∏Å‡∏£‡∏≠‡∏ö ‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞", category:"veg", unit:"‡∏Å‡∏Å.", price:39, stock:50, rating:4.7, images:["ü•í"] },
  { name:"‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡πÄ‡∏ä‡∏≠‡∏£‡∏µ‡πà", description:"‡∏´‡∏ß‡∏≤‡∏ô ‡∏™‡∏µ‡∏™‡∏î", category:"fruit", unit:"‡∏Å‡∏•‡πà‡∏≠‡∏á", price:65, stock:18, rating:4.8, images:["üçÖ"] },
  { name:"‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ", description:"‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏≠‡∏° ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏â‡πà‡∏≥", category:"fruit", unit:"‡∏Å‡∏Å.", price:89, stock:20, rating:4.7, images:["ü•≠"] },
  { name:"‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤", description:"‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏° ‡∏Å‡∏≥‡πÉ‡∏´‡∏ç‡πà", category:"herb", unit:"‡∏Å‡∏≥", price:15, stock:100, rating:4.5, images:["üåø"] }
]

// seed buyers
const buyerDocs = []
for (const b of buyers){
  const passwordHash = await bcrypt.hash(b.password, 10)
  let u = await User.findOne({ email: b.email })
  if (!u) {
    u = await User.create({ name:b.name, email:b.email.toLowerCase(), phone:b.phone, passwordHash, role:'buyer', addresses:[{ line:b.address }] })
    console.log('[seed] buyer created', u.email)
  } else {
    await User.updateOne({ _id:u._id }, { name:b.name, phone:b.phone, passwordHash, role:'buyer' })
    console.log('[seed] buyer updated', u.email)
  }
  buyerDocs.push(u)
}

// seed products
const prodDocs = []
for (const p of products){
  let d = await Product.findOne({ name: p.name })
  if (!d) d = await Product.create(p)
  else await Product.updateOne({ _id:d._id }, p)
  prodDocs.push(d)
}
console.log('[seed] products:', prodDocs.length)

// seed one order for buyer A
const u = buyerDocs[0]
if (u){
  const items = [
    { productId: String(prodDocs[0]._id), name: prodDocs[0].name, price: prodDocs[0].price, qty: 2 },
    { productId: String(prodDocs[3]._id), name: prodDocs[3].name, price: prodDocs[3].price, qty: 1 }
  ]
  const total = items.reduce((s,i)=> s + i.price*i.qty, 0)
  const exists = await Order.findOne({ user: u._id })
  if (!exists){
    await Order.create({ user: u._id, items, total, status:'processing', paymentMethod:'cod', deliveryMethod:'delivery', address:'‡∏Å‡∏ó‡∏°.' })
    console.log('[seed] sample order created for', u.email)
  } else {
    console.log('[seed] sample order exists, skip')
  }
}

console.log('[seed] done')
process.exit(0)
